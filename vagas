#!/usr/bin/env perl

use Mojolicious::Lite;
use Mojo::IOLoop;
use Mango;

BEGIN {
  use File::Basename 'dirname';
  push @INC, dirname(__FILE__);
}

use ParseVagas;

# Documentation browser under "/perldoc"
plugin 'PODRenderer' if app->mode eq 'development';

get '/' => sub {
  my $self = shift;

  $self->redirect_to('index.html');  

};

get '/inicio' => sub {
  my $self = shift;
  
  my $url = $self->url('/apinfo/inc/list4.cfm');

  $self->render_later;

  Mojo::IOLoop->timer(0 => sub {
    my $tx = $self->obter_ua->get($url);
    $self->render(json => { sessao => $self->stash('session_id') });
  });

};

post '/pesquisar' => sub {
  my $self = shift;
  my $dados = $self->req->json;

  my $url = $self->url('/apinfo/inc/list4.cfm');

  $self->render_later;

  Mojo::IOLoop->timer(0 => sub {
    my $tx = $self->obter_ua->post($url => 
      form => {suby => 'Pesquisar',
         estado => 'SP',
         codvaga => '',
         ddmmaa1 => '',
         ddmmaa2 => '',
         andor => '1',
         onde => '2',
         keyw => $dados->{filtro}
      }
    );
    
    # salvar cada resposta no mongolab
    my $vagas = ParseVagas::fazer($tx->res->body);
    $self->render(json => $vagas);
    Mojo::IOLoop->timer(0 => sub { salvar_cache($self, $vagas); });

  }); 
};

post '/paginar' => sub {
  my $self = shift;
  my $dados = $self->req->json;

  my $url = $self->url('/apinfo/inc/list4.cfm');

  $self->render_later;

  Mojo::IOLoop->timer(0 => sub {
    my $tx = $self->obter_ua->post($url => 
      form => {pag => $dados->{pag},
        tv => $dados->{tv},
        estado => 'SP',
        ddmmaa1 => '',
        ddmmaa2 => '',
        andor => '1',
        onde => '2',
        keyw => $dados->{filtro}
      }
    );
  
    # salvar cada resposta no mongolab
    my $vagas = ParseVagas::fazer($tx->res->body);
    $self->render(json => $vagas);  
    Mojo::IOLoop->timer(0 => sub { salvar_cache($self, $vagas); });
  }); 
};

get '/cache/:vagaId' => [ vagaId => qr/\d+/ ] => sub {
  my $self = shift;

  $self->render_later;

  Mojo::IOLoop->timer(0 => sub {
    # recuperar resposta no mongolab
    if ($self->config->{servidor}->{mongodb}) {
      my $mango = Mango->new($self->config->{servidor}->{mongodb});
      my $doc = $mango->db('vagas')->collection('vagas')->
        find_one({ codigo => $self->param('vagaId') });

      if ($doc) {
        delete $doc->{_id};
        $self->render(json => {tv => 1,
          op => [$doc]});
        return;
      }
    }

    # buscar direto pelo id
    my $url = $self->url('/apinfo/inc/list44.cfm?codvaga=' . $self->param('vagaId'));

    my $tx = $self->obter_ua->get($url);
    my $vagas = ParseVagas::fazer($tx->res->body);
    if ($vagas->{tv} == 1) {
      delete $vagas->{op}->[0]->{chave};
      $self->render(json => $vagas);  
      Mojo::IOLoop->timer(0 => sub { salvar_cache($self, $vagas); });
    } else {
      $self->render(json => {tv => 0,
        erro => 'CÃ³digo nÃ£o encontrado: ' . $self->param('vagaId'),
        op => []});
    }
  });

};

get '/captcha' => sub {
  my $self = shift;

  my $codigo = $self->param('codigo');
  my $chave = $self->param('chave');

  $self->render_later;

  my $url = $self->url('/apinfo/inc/list44.cfm?codvaga=' . $codigo);

  Mojo::IOLoop->timer(0 => sub {
    unless ($chave) {
      my $tx = $self->obter_ua->get($url);
      my $vagas = ParseVagas::fazer($tx->res->body);
      if ($vagas->{tv} == 1) {
        $chave = $vagas->{op}->[0]->{chave};
      } else {
        $self->render_not_found();
        return;
      };
    }

    my $url = $self->url('/apinfo/inc/enviecv.cfm?codvaga=' . $codigo . '&' . $chave);

    my $tx = $self->obter_ua->get($url);
    
    $url = $self->url('/apinfo/inc/kaptcha.cfm');
    
    Mojo::IOLoop->timer(0 => sub {
      my $tx = $self->obter_ua->get($url);
      # TODO melhorar o tratamento aqui
      $self->res->headers->content_length($tx->res->content->body_size);
      $self->finish($tx->res->content->get_body_chunk(0));
    });    

  });
};

post '/pesquisarEmail' => sub {
  my $self = shift;
  my $dados = $self->req->json;

  $self->render_later;
  
  my $url = $self->url('/apinfo/inc/enviecv.cfm');

  Mojo::IOLoop->timer(0 => sub {
    my $tx = $self->obter_ua->post($url => 
      form => {subx => 'Enviar',
        cpf2 => '',
        codvaga => $dados->{codigo},
        code => $dados->{verificacao},
        chave3 => ''
      }
    );

    my $resposta = ParseVagas::email($tx->res->body);

    $self->render(json => $resposta);
    
    if ($resposta->{email}) {
      Mojo::IOLoop->timer(0 => sub { 
        atualizar_cache($self, $dados->{codigo}, $resposta->{email}); });
    }
  });
};

sub salvar_cache {
  my $self = shift;
  return unless($self->config->{servidor}->{mongodb});
  my $dados = shift;
  my $mango = Mango->new($self->config->{servidor}->{mongodb});
  my $vagas_collection = $mango->db('vagas')->collection('vagas');
  my $vagas_ids_collection = $mango->db('vagas')->collection('vagas_ids');
  for my $vaga (@{$dados->{op}}) {
    # nao esta funcionando a versao nao bloqueante
    my $doc = $vagas_ids_collection->find_one({ codigo => $vaga->{codigo} });
    unless ($doc) {
      delete $vaga->{chave};
      $vagas_collection->insert($vaga);
      $vagas_ids_collection->insert({ codigo => $vaga->{codigo} });
    } 
  }
}

sub atualizar_cache {
  my $self = shift;
  return unless($self->config->{servidor}->{mongodb});
  my $codigo = shift;
  my $email = shift;
  my $mango = Mango->new($self->config->{servidor}->{mongodb});
  my $vagas_collection = $mango->db('vagas')->collection('vagas');
  # nao esta funcionando a versao nao bloqueante
  my $doc = $vagas_collection->find_one({ codigo => $codigo });
  if ($doc) {
    unless ($doc->{email}) {
      # o mais feio update da minha vida
      $vagas_collection->update($doc, { 'cidade' => $doc->{cidade},
        'codigo' => $doc->{codigo},
        'data' => $doc->{data},
        'descricao' => $doc->{descricao},
        'email' => $email,
        'empresa' => $doc->{empresa},
        'estado' => $doc->{estado},
        'titulo' => $doc->{titulo}});
    }
  } 
}

plugin Config => {file => 'vagas.conf'};
plugin 'VagasHelpers';

app->secrets('xxxxxxxxxx');
app->start;

