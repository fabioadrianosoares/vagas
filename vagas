#!/usr/bin/env perl

use Mojolicious::Lite;
use Mojo::IOLoop;
use Mango;

BEGIN {
  use File::Basename 'dirname';
  push @INC, dirname(__FILE__);
}

use ParseVagas;

# Documentation browser under "/perldoc"
plugin 'PODRenderer' if app->mode eq 'development';

get '/' => sub {
  my $self = shift;

  $self->redirect_to('index.html');  

};

get '/inicio' => sub {
  my $self = shift;
  
  my $url = $self->url('/apinfo/inc/list4.cfm');

  $self->render_later;

  Mojo::IOLoop->timer(0 => sub {
    my $tx = $self->obter_ua->get($url);
    $self->render(json => { sessao => $self->stash('session_id') });
  });

};

post '/pesquisar' => sub {
  my $self = shift;
  my $dados = $self->req->json;

  my $url = $self->url('/apinfo/inc/list4.cfm');

  $self->render_later;

  Mojo::IOLoop->timer(0 => sub {
    my $tx = $self->obter_ua->post($url => 
      form => {suby => 'Pesquisar',
         estado => 'SP',
         codvaga => '',
         ddmmaa1 => '',
         ddmmaa2 => '',
         andor => '1',
         onde => '2',
         keyw => $dados->{filtro}
      }
    );
    
    # salvar cada resposta no mongolab
    my $vagas = ParseVagas::fazer($tx->res->body);
    $self->render(json => $vagas);
    Mojo::IOLoop->timer(0 => sub { salvar_cache($self, $vagas); });

  }); 
};

post '/paginar' => sub {
  my $self = shift;
  my $dados = $self->req->json;

  my $url = $self->url('/apinfo/inc/list4.cfm');

  $self->render_later;

  Mojo::IOLoop->timer(0 => sub {
    my $tx = $self->obter_ua->post($url => 
      form => {pag => $dados->{pag},
        tv => $dados->{tv},
        estado => 'SP',
        ddmmaa1 => '',
        ddmmaa2 => '',
        andor => '1',
        onde => '2',
        keyw => $dados->{filtro}
      }
    );
  
    # salvar cada resposta no mongolab
    my $vagas = ParseVagas::fazer($tx->res->body);
    $self->render(json => $vagas);  
    Mojo::IOLoop->timer(0 => sub { salvar_cache($self, $vagas); });
  }); 
};

get '/cache/:vagaId' => [ vagaId => qr/\d+/ ] => sub {
  my $self = shift;

  unless ($self->config->{servidor}->{mongodb}) {
    $self->render(json => {tv => 0, erro => 'Cache MongoLab desligado. ', op => []});  
    return;
  }

  $self->render_later;

  # recuperar resposta no mongolab
  Mojo::IOLoop->timer(0 => sub {
    my $mango = Mango->new($self->config->{servidor}->{mongodb});
    my $doc = $mango->db('vagas')->collection('vagas')->
      find_one({ codigo => $self->param('vagaId') });

    if ($doc) {
      delete $doc->{_id};
      $self->render(json => {tv => 1,
        op => [$doc]});   
    } else {
      $self->render(json => {tv => 0,
        erro => 'CÃ³digo nÃ£o encontrado: ' . $self->param('vagaId'),
        op => []});        
    }
  });


};

sub salvar_cache {
  my $self = shift;
  return unless($self->config->{servidor}->{mongodb});
  my $dados = shift;
  my $mango = Mango->new($self->config->{servidor}->{mongodb});
  my $vagas_collection = $mango->db('vagas')->collection('vagas');
  my $vagas_ids_collection = $mango->db('vagas')->collection('vagas_ids');
  for my $vaga (@{$dados->{op}}) {
    # nao esta funcionando a versao nao bloqueante
    my $doc = $vagas_ids_collection->find_one({ codigo => $vaga->{codigo} });
    unless ($doc) {
      $vagas_collection->insert($vaga);
      $vagas_ids_collection->insert({ codigo => $vaga->{codigo} });
    } 
  }
}

plugin Config => {file => 'vagas.conf'};
plugin 'VagasHelpers';

app->secrets('xxxxxxxxxx');
app->start;

